import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';

const Register = () => {
    const navigate = useNavigate();
    const [formData, setFormData] = useState({
        name: '',
        email: '',
        password: '',
        confirmPassword: '',
        agreeToTerms: false
    });

    const [showPassword, setShowPassword] = useState(false);
    const [showConfirmPassword, setShowConfirmPassword] = useState(false);
    const [isLoading, setIsLoading] = useState(false);
    const [errors, setErrors] = useState({});
    const [successMessage, setSuccessMessage] = useState('');

    const handleChange = (e) => {
        const { name, value, type, checked } = e.target;
        setFormData(prev => ({
            ...prev,
            [name]: type === 'checkbox' ? checked : value
        }));

        // Clear error when user starts typing
        if (errors[name]) {
            setErrors(prev => ({
                ...prev,
                [name]: ''
            }));
        }
    };

    const validateForm = () => {
        const newErrors = {};

        if (!formData.name.trim()) {
            newErrors.name = 'Vui l√≤ng nh·∫≠p h·ªç t√™n';
        }

        if (!formData.email.trim()) {
            newErrors.email = 'Vui l√≤ng nh·∫≠p email';
        } else if (!/\S+@\S+\.\S+/.test(formData.email)) {
            newErrors.email = 'Email kh√¥ng h·ª£p l·ªá';
        }

        if (!formData.password) {
            newErrors.password = 'Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u';
        } else if (formData.password.length < 6) {
            newErrors.password = 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±';
        }

        if (!formData.confirmPassword) {
            newErrors.confirmPassword = 'Vui l√≤ng x√°c nh·∫≠n m·∫≠t kh·∫©u';
        } else if (formData.password !== formData.confirmPassword) {
            newErrors.confirmPassword = 'M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp';
        }

        if (!formData.agreeToTerms) {
            newErrors.agreeToTerms = 'Vui l√≤ng ƒë·ªìng √Ω v·ªõi ƒëi·ªÅu kho·∫£n s·ª≠ d·ª•ng';
        }

        setErrors(newErrors);
        return Object.keys(newErrors).length === 0;
    };

    // API register function
    const registerWithAPI = async (userData) => {
        try {
            const response = await axios.post('http://localhost:8080/api/v1/auth/register', {
                email: userData.email,
                password: userData.password,
                name: userData.name
            }, {
                headers: {
                    'Content-Type': 'application/json',
                }
            });

            // Check if response is successful based on status code
            if (response.data.statusCode === 200 && response.data.message === 'SUCCESS') {
                return {
                    success: true,
                    data: response.data.data,
                    message: response.data.message
                };
            } else {
                throw new Error(response.data.message || 'ƒêƒÉng k√Ω kh√¥ng th√†nh c√¥ng');
            }
        } catch (error) {
            console.error('API Register error:', error);

            // Handle axios error response
            if (error.response && error.response.data) {
                return {
                    success: false,
                    message: error.response.data.message || 'ƒê√£ x·∫£y ra l·ªói khi ƒëƒÉng k√Ω t√†i kho·∫£n'
                };
            }

            return {
                success: false,
                message: error.message || 'ƒê√£ x·∫£y ra l·ªói khi ƒëƒÉng k√Ω t√†i kho·∫£n'
            };
        }
    };

    const handleSubmit = async (e) => {
        e.preventDefault();

        if (!validateForm()) {
            return;
        }

        setIsLoading(true);
        setSuccessMessage('');
        setErrors({});

        try {
            // Try API registration first
            const apiResult = await registerWithAPI(formData);

            if (apiResult.success) {
                console.log('API Registration successful:', apiResult.data);

                // Show success message with the message from API response
                setSuccessMessage(`üéâ ƒêƒÉng k√Ω th√†nh c√¥ng! ${apiResult.data || 'Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ k√≠ch ho·∫°t t√†i kho·∫£n.'}`);

                // Redirect to login page after 3 seconds
                setTimeout(() => {
                    navigate('/login', {
                        state: {
                            message: 'ƒêƒÉng k√Ω th√†nh c√¥ng! Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ k√≠ch ho·∫°t t√†i kho·∫£n, sau ƒë√≥ ƒëƒÉng nh·∫≠p.',
                            registeredEmail: formData.email
                        }
                    });
                }, 3000);

            } else {
                // Handle registration errors from API
                if (apiResult.message.includes('email')) {
                    setErrors({ email: 'Email n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng' });
                } else if (apiResult.message.includes('phone')) {
                    setErrors({ phone: 'S·ªë ƒëi·ªán tho·∫°i n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng' });
                } else {
                    setErrors({ general: apiResult.message });
                }

                // Fallback to demo mode
                console.log('API registration failed, using demo mode...');
                console.log('Register data:', formData);

                setSuccessMessage('üéØ ƒêƒÉng k√Ω th√†nh c√¥ng (ch·∫ø ƒë·ªô demo)! B·∫°n s·∫Ω ƒë∆∞·ª£c chuy·ªÉn ƒë·∫øn trang ƒëƒÉng nh·∫≠p...');

                setTimeout(() => {
                    navigate('/login', {
                        state: {
                            message: 'ƒêƒÉng k√Ω th√†nh c√¥ng! Vui l√≤ng s·ª≠ d·ª•ng t√†i kho·∫£n demo ƒë·ªÉ ƒëƒÉng nh·∫≠p.',
                            registeredEmail: formData.email
                        }
                    });
                }, 2000);
            }

        } catch (error) {
            console.error('Registration error:', error);
            setErrors({ general: 'ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën. Vui l√≤ng th·ª≠ l·∫°i.' });
        } finally {
            setIsLoading(false);
        }
    };

    return (
        <div className="min-h-screen bg-gradient-to-br from-green-600 via-blue-600 to-purple-700 flex items-center justify-center p-4">
            {/* Background decorations */}
            <div className="absolute inset-0 overflow-hidden">
                <div className="absolute top-20 left-20 w-24 h-24 bg-white/10 rounded-full blur-xl animate-pulse"></div>
                <div className="absolute top-60 right-10 w-36 h-36 bg-yellow-400/20 rounded-full blur-2xl animate-pulse delay-1000"></div>
                <div className="absolute bottom-32 left-1/4 w-44 h-44 bg-pink-400/15 rounded-full blur-2xl animate-pulse delay-2000"></div>
            </div>

            <div className="relative z-10 w-full max-w-lg">
                {/* Register Card */}
                <div className="bg-white/95 backdrop-blur-sm rounded-2xl shadow-2xl p-8 border border-white/20">
                    {/* Header */}
                    <div className="text-center mb-8">
                        <div className="text-6xl mb-4">‚ú®</div>
                        <h1 className="text-3xl font-bold text-gray-800 mb-2">ƒêƒÉng k√Ω</h1>
                        <p className="text-gray-600">T·∫°o t√†i kho·∫£n m·ªõi v√† kh√°m ph√° DatShop!</p>
                    </div>

                    {/* Success Message */}
                    {successMessage && (
                        <div className="bg-green-50 border border-green-200 rounded-xl p-4 mb-6">
                            <p className="text-green-700 text-sm text-center">{successMessage}</p>
                        </div>
                    )}

                    {/* General Error Message */}
                    {errors.general && (
                        <div className="bg-red-50 border border-red-200 rounded-xl p-4 mb-6">
                            <p className="text-red-700 text-sm">‚ùå {errors.general}</p>
                        </div>
                    )}

                    {/* Register Form */}
                    <form onSubmit={handleSubmit} className="space-y-6">
                        {/* Name Field */}
                        <div>
                            <label htmlFor="name" className="block text-sm font-semibold text-gray-700 mb-2">
                                üë§ H·ªç v√† t√™n
                            </label>
                            <input
                                type="text"
                                id="name"
                                name="name"
                                value={formData.name}
                                onChange={handleChange}
                                className={`w-full px-4 py-3 border rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300 text-gray-800 bg-white ${errors.name ? 'border-red-500' : 'border-gray-300'}`}
                                placeholder="Nh·∫≠p h·ªç v√† t√™n"
                                disabled={isLoading}
                            />
                            {errors.name && (
                                <p className="mt-1 text-sm text-red-500">‚ùå {errors.name}</p>
                            )}
                        </div>

                        {/* Email Field */}
                        <div>
                            <label htmlFor="email" className="block text-sm font-semibold text-gray-700 mb-2">
                                üìß Email
                            </label>
                            <input
                                type="email"
                                id="email"
                                name="email"
                                value={formData.email}
                                onChange={handleChange}
                                className={`w-full px-4 py-3 border rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300 text-gray-800 bg-white ${errors.email ? 'border-red-500' : 'border-gray-300'}`}
                                placeholder="Nh·∫≠p email c·ªßa b·∫°n"
                                disabled={isLoading}
                            />
                            {errors.email && (
                                <p className="mt-1 text-sm text-red-500">‚ùå {errors.email}</p>
                            )}
                        </div>

                        {/* Password Field */}
                        <div>
                            <label htmlFor="password" className="block text-sm font-semibold text-gray-700 mb-2">
                                üîí M·∫≠t kh·∫©u
                            </label>
                            <div className="relative">
                                <input
                                    type={showPassword ? 'text' : 'password'}
                                    id="password"
                                    name="password"
                                    value={formData.password}
                                    onChange={handleChange}
                                    className={`w-full px-4 py-3 pr-12 border rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300 text-gray-800 bg-white ${errors.password ? 'border-red-500' : 'border-gray-300'}`}
                                    placeholder="Nh·∫≠p m·∫≠t kh·∫©u (√≠t nh·∫•t 6 k√Ω t·ª±)"
                                    disabled={isLoading}
                                />
                                <button
                                    type="button"
                                    onClick={() => setShowPassword(!showPassword)}
                                    className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500 hover:text-gray-700 transition-colors disabled:opacity-50"
                                    disabled={isLoading}
                                >
                                    {showPassword ? 'üôà' : 'üëÅÔ∏è'}
                                </button>
                            </div>
                            {errors.password && (
                                <p className="mt-1 text-sm text-red-500">‚ùå {errors.password}</p>
                            )}
                        </div>

                        {/* Confirm Password Field */}
                        <div>
                            <label htmlFor="confirmPassword" className="block text-sm font-semibold text-gray-700 mb-2">
                                üîê X√°c nh·∫≠n m·∫≠t kh·∫©u
                            </label>
                            <div className="relative">
                                <input
                                    type={showConfirmPassword ? 'text' : 'password'}
                                    id="confirmPassword"
                                    name="confirmPassword"
                                    value={formData.confirmPassword}
                                    onChange={handleChange}
                                    className={`w-full px-4 py-3 pr-12 border rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300 text-gray-800 bg-white ${errors.confirmPassword ? 'border-red-500' : 'border-gray-300'}`}
                                    placeholder="Nh·∫≠p l·∫°i m·∫≠t kh·∫©u"
                                    disabled={isLoading}
                                />
                                <button
                                    type="button"
                                    onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                                    className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500 hover:text-gray-700 transition-colors disabled:opacity-50"
                                    disabled={isLoading}
                                >
                                    {showConfirmPassword ? 'üôà' : 'üëÅÔ∏è'}
                                </button>
                            </div>
                            {errors.confirmPassword && (
                                <p className="mt-1 text-sm text-red-500">‚ùå {errors.confirmPassword}</p>
                            )}
                        </div>

                        {/* Terms Agreement */}
                        <div>
                            <label className="flex items-start">
                                <input
                                    type="checkbox"
                                    name="agreeToTerms"
                                    checked={formData.agreeToTerms}
                                    onChange={handleChange}
                                    className="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 focus:ring-2 mt-1"
                                    disabled={isLoading}
                                />
                                <span className="ml-2 text-sm text-gray-600">
                                    T√¥i ƒë·ªìng √Ω v·ªõi{' '}
                                    <a href="#" className="text-blue-600 hover:text-blue-800 font-semibold">
                                        ƒêi·ªÅu kho·∫£n s·ª≠ d·ª•ng
                                    </a>
                                    {' '}v√†{' '}
                                    <a href="#" className="text-blue-600 hover:text-blue-800 font-semibold">
                                        Ch√≠nh s√°ch b·∫£o m·∫≠t
                                    </a>
                                </span>
                            </label>
                            {errors.agreeToTerms && (
                                <p className="mt-1 text-sm text-red-500">‚ùå {errors.agreeToTerms}</p>
                            )}
                        </div>

                        {/* Register Button */}
                        <button
                            type="submit"
                            disabled={isLoading || successMessage}
                            className="w-full bg-gradient-to-r from-green-600 to-blue-600 hover:from-green-700 hover:to-blue-700 text-white py-3 px-6 rounded-xl font-bold text-lg transition-all duration-300 transform hover:scale-105 shadow-lg hover:shadow-xl disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none"
                        >
                            {isLoading ? (
                                <span className="flex items-center justify-center gap-2">
                                    ‚è≥ ƒêang t·∫°o t√†i kho·∫£n...
                                </span>
                            ) : successMessage ? (
                                <span className="flex items-center justify-center gap-2">
                                    ‚úÖ T·∫°o t√†i kho·∫£n th√†nh c√¥ng!
                                </span>
                            ) : (
                                <span className="flex items-center justify-center gap-2">
                                    üéâ T·∫°o t√†i kho·∫£n
                                </span>
                            )}
                        </button>
                    </form>

                    {/* Sign In Link */}
                    <div className="mt-8 text-center">
                        <p className="text-gray-600">
                            ƒê√£ c√≥ t√†i kho·∫£n?{' '}
                            <a
                                href="/login"
                                className="text-blue-600 hover:text-blue-800 font-semibold transition-colors"
                            >
                                ƒêƒÉng nh·∫≠p ngay
                            </a>
                        </p>
                    </div>

                    {/* Back to Home */}
                    <div className="mt-4 text-center">
                        <a href="/" className="inline-flex items-center gap-2 text-gray-500 hover:text-gray-700 transition-colors">
                            ‚Üê V·ªÅ trang ch·ªß
                        </a>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default Register;
